/*
 * Aurora: https://github.com/pixelmatix/aurora
 * Copyright (c) 2014 Jason Coon
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef RunningTextDraw_H

//#include "../matrix.h"
//#ifndef _SEPARATE_
//#include "../matrix.h"
//#include "h2.h"
//#else
//#include "h2.h"
//#endif

#include "effects/Drawable.h"
#include "matrixHelper.h"

#include "globals.h"

#define DEBUG 1

class RunningTextDraw : public AuroraDrawable {
  private:    
    byte hueoffset = 0;
    byte frame = 0;
    bool flag = false;
    int xpos = MATRIX_WIDTH;
    int ypos;

  public:
    RunningTextDraw() {
        name = (char *)"RunningText";
    }
    void start() {              
      matrix->clear();
      matrix->show();
      frame = 0;
      xpos=MATRIX_WIDTH;
      uint16_t text_length = _RUN_TEXT_.length();
      matrix->setTextWrap(false);  // we don't wrap text so it scrolls nicely
      matrix->setTextSize(1);
      matrix->setRotation(0);
      matrix->setTextColor(__RUNNING_STRING_BACKGROUND_COLOR);      
    }
    

unsigned int drawFrame() {
      frame++;

    // Asuming 5 pixel average character width
//    for (int xpos=MATRIX_WIDTH; xpos>-(MATRIX_WIDTH+text_length*5); xpos--)
    if ( xpos>-(MATRIX_WIDTH+_RUN_TEXT_.length()*5) )      
    {
      xpos--;
      matrix->setTextColor(__RUNNING_STRING_COLOR);//matrix->Color(colorR,colorG,colorB));
      matrix->clear();
      matrix->setCursor(xpos,ypos);
      matrix->println(text);
//      delay(scroll_delay);
      yield();

      // This might smooth the transition a bit if we go slow
      // matrix->setTextColor(matrix->Color(colorR/4,colorG/4,colorB/4));
      // matrix->setCursor(xpos-1,ypos);
      // matrix->println(text);

//      delay(scroll_delay/5);
      yield();
    }
  };
}

#endif
